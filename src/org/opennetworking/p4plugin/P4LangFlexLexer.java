/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */


package org.opennetworking.p4plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>p4lexer.flex</tt>
 */
class P4LangFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NORMAL = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1"+
    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22"+
    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1"+
    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107"+
    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13"+
    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1"+
    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121"+
    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1"+
    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13"+
    "\1\24\1\31\4\13\1\145\1\146\1\147\1\150\1\13\1\150\1\13\1\151\1\147\1\152"+
    "\5\13\1\153\1\121\1\1\1\154\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120"+
    "\2\42\1\56\1\13\1\41\1\150\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1"+
    "\13\1\36\2\121\1\155\1\120\4\1\4\13\1\42\1\121\1\156\1\151\7\13\1\151\3\13"+
    "\1\26\1\100\2\13\1\41\1\146\4\1\1\157\1\13\1\160\17\13\1\161\21\13\1\144\2"+
    "\13\1\144\1\162\1\13\1\41\3\13\1\163\1\164\1\165\1\133\1\164\2\1\1\166\1\167"+
    "\1\63\1\170\1\1\1\171\1\1\1\133\3\1\2\13\1\63\1\172\1\173\1\174\1\127\1\175"+
    "\1\1\2\13\1\146\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10\13\1\176"+
    "\1\151\2\13\1\136\3\13\1\177\1\167\1\13\1\200\4\201\2\13\2\1\1\167\35\1\1"+
    "\202\1\1\1\24\1\203\1\24\4\13\1\204\1\24\4\13\1\137\1\205\1\13\1\41\1\24\4"+
    "\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2\1\10\13"+
    "\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\206\7\13\1\16\1\1\1"+
    "\207\1\210\5\13\1\211\1\13\1\120\1\26\3\1\1\207\2\13\1\26\1\1\3\13\1\151\4"+
    "\13\1\57\1\121\1\13\1\212\2\13\1\41\2\13\1\151\1\13\1\133\4\13\1\213\1\121"+
    "\1\13\1\120\3\13\1\200\1\41\1\121\1\13\1\113\4\13\1\32\1\154\1\13\1\214\1"+
    "\215\1\216\1\201\2\13\1\137\1\57\7\13\1\217\1\121\72\13\1\151\1\13\1\220\2"+
    "\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\200\1\221\1\35\1\222\1\223\6\13"+
    "\1\16\1\1\1\224\25\13\1\41\1\1\4\13\1\210\2\13\1\26\2\1\1\42\1\13\1\1\1\13"+
    "\1\225\1\226\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\227\1\24\1\31\1\56\4\13"+
    "\1\120\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\41\2\1\7\13\1\31\4\1\3\13\1"+
    "\150\7\1\1\234\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13\1\31"+
    "\1\13\1\41\2\13\1\235\1\236\2\1\11\13\1\41\1\121\2\13\1\235\1\13\1\42\2\13"+
    "\1\26\3\13\1\151\11\1\23\13\1\200\1\13\1\57\1\26\11\1\1\237\2\13\1\240\1\13"+
    "\1\57\1\13\1\200\1\13\1\120\4\1\1\13\1\241\1\13\1\57\1\13\1\121\4\1\3\13\1"+
    "\242\4\1\1\243\1\244\1\13\1\245\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1\13\1"+
    "\200\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\146\3\1\3\13\1"+
    "\32\3\13\1\32\60\1\4\13\1\200\1\1\1\56\1\167\3\13\1\31\1\1\1\13\1\146\1\121"+
    "\3\13\1\134\1\1\2\13\1\246\4\13\1\247\1\250\2\1\1\13\1\22\1\13\1\251\4\1\1"+
    "\252\1\27\1\146\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\253\1\254\1\150"+
    "\10\1\4\13\1\31\1\121\2\1\4\13\1\255\1\121\12\1\3\13\1\256\1\63\1\257\2\1"+
    "\4\13\1\260\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4\13"+
    "\1\121\1\167\34\1\3\13\1\146\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\210\1\13"+
    "\1\210\1\132\1\200\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\151\53\1\2"+
    "\13\1\120\75\1\44\13\1\200\33\1\43\13\1\146\1\13\1\120\1\121\6\1\1\13\1\41"+
    "\1\150\3\13\1\200\1\151\1\121\1\224\1\261\1\13\67\1\4\13\1\150\2\13\1\120"+
    "\1\167\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1"+
    "\31\1\133\1\146\1\262\114\1\1\263\1\264\1\265\1\1\1\266\11\1\1\267\33\1\5"+
    "\13\1\134\3\13\1\147\1\270\1\271\1\272\3\13\1\273\1\274\1\13\1\275\1\276\1"+
    "\77\24\13\1\256\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13"+
    "\1\120\1\13\1\35\1\13\1\35\1\13\1\277\3\13\40\1\3\13\1\220\2\13\1\133\1\300"+
    "\1\170\1\156\1\24\25\1\1\14\1\211\1\301\75\1\14\13\1\150\1\200\2\1\4\13\1"+
    "\31\1\121\112\1\1\272\1\13\1\302\1\303\1\304\1\305\1\306\1\307\1\310\1\42"+
    "\1\311\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\200\2\1\103"+
    "\13\1\150\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3232 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\5\1\4\22\0\1\1\1\63\1\10\1\12\1\0\1\67\1\56\1\0\1\72\1\73"+
    "\1\6\1\65\1\101\1\66\1\57\1\3\1\46\1\55\6\53\2\45\1\100\1\103\1\60\1\62\1"+
    "\64\1\102\1\104\1\50\1\54\1\50\1\51\2\50\5\44\1\7\2\44\1\52\10\44\1\47\2\44"+
    "\1\74\1\11\1\75\1\70\1\37\1\0\1\14\1\15\1\21\1\30\1\31\1\32\1\41\1\36\1\22"+
    "\1\44\1\40\1\26\1\34\1\24\1\23\1\25\1\44\1\20\1\16\1\17\1\33\1\43\1\42\1\35"+
    "\1\27\1\44\1\76\1\61\1\77\1\71\6\0\1\5\24\0\1\13\12\0\1\13\4\0\1\13\5\0\27"+
    "\13\1\0\12\13\4\0\14\13\16\0\5\13\7\0\1\13\1\0\1\13\1\0\5\13\1\0\2\13\2\0"+
    "\4\13\1\0\1\13\6\0\1\13\1\0\3\13\1\0\1\13\1\0\4\13\1\0\23\13\1\0\11\13\1\0"+
    "\26\13\2\0\1\13\6\0\10\13\10\0\16\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0\1\13\10"+
    "\0\13\13\5\0\3\13\15\0\12\13\4\0\6\13\1\0\10\13\2\0\12\13\1\0\23\13\2\0\14"+
    "\13\2\0\11\13\4\0\1\13\5\0\16\13\2\0\14\13\4\0\5\13\1\0\10\13\6\0\20\13\2"+
    "\0\13\13\2\0\16\13\1\0\1\13\3\0\4\13\2\0\11\13\2\0\2\13\2\0\4\13\10\0\1\13"+
    "\4\0\2\13\1\0\1\13\1\0\3\13\1\0\6\13\4\0\2\13\1\0\2\13\1\0\2\13\1\0\2\13\2"+
    "\0\1\13\1\0\5\13\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\13\1\0\1\13\7\0\20\13\13"+
    "\0\3\13\1\0\11\13\1\0\2\13\1\0\2\13\1\0\5\13\2\0\12\13\1\0\3\13\1\0\3\13\2"+
    "\0\1\13\30\0\1\13\7\0\3\13\1\0\10\13\2\0\6\13\2\0\2\13\2\0\3\13\10\0\2\13"+
    "\4\0\2\13\1\0\1\13\1\0\1\13\20\0\2\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13"+
    "\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\5\13\3\0\3\13\1\0\4\13\2\0\1\13\6"+
    "\0\1\13\10\0\4\13\1\0\10\13\1\0\3\13\1\0\30\13\3\0\10\13\1\0\3\13\1\0\4\13"+
    "\7\0\2\13\1\0\3\13\5\0\4\13\1\0\5\13\2\0\4\13\5\0\2\13\7\0\1\13\2\0\2\13\16"+
    "\0\3\13\1\0\10\13\1\0\7\13\1\0\3\13\1\0\5\13\5\0\4\13\7\0\1\13\12\0\6\13\2"+
    "\0\2\13\1\0\22\13\3\0\10\13\1\0\11\13\1\0\1\13\2\0\7\13\3\0\1\13\4\0\6\13"+
    "\1\0\1\13\1\0\10\13\2\0\2\13\14\0\17\13\1\0\12\13\7\0\2\13\1\0\1\13\2\0\2"+
    "\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13"+
    "\1\0\15\13\1\0\3\13\2\0\5\13\1\0\1\13\1\0\6\13\2\0\12\13\2\0\4\13\10\0\2\13"+
    "\13\0\1\13\1\0\1\13\1\0\1\13\4\0\12\13\1\0\24\13\3\0\5\13\1\0\12\13\6\0\1"+
    "\13\11\0\6\13\1\0\1\13\5\0\1\13\2\0\13\13\1\0\15\13\1\0\4\13\2\0\7\13\1\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\16\13\2\0"+
    "\6\13\2\0\13\13\3\0\13\13\7\0\15\13\1\0\7\13\13\0\4\13\14\0\1\13\1\0\2\13"+
    "\14\0\4\13\3\0\1\13\4\0\2\13\15\0\3\13\11\0\1\13\23\0\10\13\1\0\23\13\1\0"+
    "\2\13\6\0\6\13\5\0\15\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\6\13\1\0\7\13\1\0"+
    "\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13\14\0\2\5\25\0\1\13\4\0\1\13\14\0"+
    "\1\13\15\0\1\13\2\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\4\13\1\0\1\13\5\0\5\13\4\0\1\13\1\0\5\13\6\0\15\13\7\0"+
    "\10\13\11\0\7\13\1\0\7\13\6\0\3\13\11\0\5\13\2\0\5\13\3\0\7\13\2\0\2\13\2"+
    "\0\3\13\5\0\16\13\1\0\12\13\1\0\1\13\7\0\11\13\2\0\27\13\2\0\15\13\3\0\1\13"+
    "\1\0\1\13\2\0\1\13\16\0\1\13\2\0\5\13\12\0\6\13\2\0\6\13\2\0\6\13\11\0\13"+
    "\13\1\0\2\13\2\0\7\13\4\0\5\13\3\0\5\13\5\0\12\13\1\0\5\13\1\0\1\13\1\0\2"+
    "\13\1\0\2\13\1\0\12\13\3\0\15\13\3\0\2\13\30\0\16\13\4\0\1\13\2\0\6\13\2\0"+
    "\6\13\2\0\6\13\2\0\3\13\3\0\14\13\1\0\16\13\1\0\2\13\1\0\1\13\15\0\1\13\2"+
    "\0\4\13\4\0\10\13\1\0\5\13\12\0\6\13\2\0\1\13\1\0\14\13\1\0\2\13\3\0\1\13"+
    "\2\0\4\13\1\0\2\13\12\0\10\13\6\0\6\13\1\0\2\13\5\0\10\13\1\0\3\13\1\0\13"+
    "\13\4\0\3\13\4\0\5\13\2\0\1\13\11\0\5\13\5\0\3\13\3\0\13\13\1\0\1\13\3\0\10"+
    "\13\6\0\1\13\1\0\7\13\1\0\1\13\1\0\4\13\1\0\2\13\6\0\1\13\5\0\7\13\2\0\7\13"+
    "\3\0\6\13\1\0\1\13\10\0\6\13\2\0\10\13\10\0\6\13\2\0\1\13\3\0\1\13\13\0\10"+
    "\13\5\0\15\13\3\0\2\13\6\0\5\13\3\0\6\13\10\0\10\13\2\0\7\13\16\0\4\13\4\0"+
    "\3\13\15\0\1\13\2\0\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13\1\0\21\13\1"+
    "\0\4\13\2\0\10\13\1\0\7\13\1\0\14\13\1\0\4\13\1\0\5\13\1\0\1\13\3\0\11\13"+
    "\1\0\10\13\2\0\2\13\5\0\1\13\12\0\2\13\1\0\2\13\1\0\5\13\6\0\2\13\1\0\1\13"+
    "\2\0\1\13\1\0\12\13\1\0\4\13\1\0\1\13\1\0\1\13\6\0\1\13\4\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\3\13\1\0\2\13\1\0\1\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1"+
    "\0\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0\7\13\1\0\4\13\1\0\4\13\1\0\1\13\1\0"+
    "\12\13\1\0\5\13\1\0\3\13\1\0\5\13\1\0\5\13");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\17\6\1\7\2\6\2\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\41\40\1\41\1\0\1\42\1\0"+
    "\1\43\17\6\1\44\1\45\15\6\1\0\1\10\4\0"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\41\1\42\3\6\1\57\15\6\1\60\1\6"+
    "\1\61\14\6\1\62\2\6\2\63\3\10\1\64\3\6"+
    "\1\65\6\6\1\66\2\6\1\67\11\6\1\70\1\71"+
    "\1\6\1\72\4\6\1\73\4\0\2\6\1\74\1\75"+
    "\3\6\1\76\2\6\1\77\1\6\1\100\1\6\1\101"+
    "\3\6\1\102\2\6\1\103\3\6\2\63\1\104\1\6"+
    "\1\105\1\106\1\107\1\110\2\6\1\111\1\6\1\112"+
    "\3\6\1\113\1\6\1\114\1\115\1\6\1\116\1\6"+
    "\1\117\1\120\1\121\1\122\1\123\2\6\1\124\6\6"+
    "\1\125\1\126\2\6\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\212\0\u0114\0\212\0\u0159"+
    "\0\u019e\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0450\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\u0114\0\u096f"+
    "\0\u0159\0\u019e\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c"+
    "\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u09b4\0\u019e"+
    "\0\212\0\u09f9\0\u01e3\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0450\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1254\0\u1323\0\u1368"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\u019e\0\u13ad\0\u13f2\0\u1437\0\u0450\0\u147c\0\u14c1"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u0450\0\u17fd\0\u0450\0\u1842\0\u1887"+
    "\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf"+
    "\0\u1af4\0\u1b39\0\u0450\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1299"+
    "\0\u12de\0\u1323\0\212\0\u1c92\0\u1cd7\0\u1d1c\0\u0450\0\u1d61"+
    "\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u0450\0\u1eff\0\u1f44"+
    "\0\u0450\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127"+
    "\0\u216c\0\u21b1\0\u0450\0\u0450\0\u21f6\0\u0450\0\u223b\0\u2280"+
    "\0\u22c5\0\u230a\0\u0450\0\u234f\0\u2394\0\u1c08\0\u23d9\0\u241e"+
    "\0\u2463\0\u0450\0\u0450\0\u24a8\0\u24ed\0\u2532\0\u0450\0\u2577"+
    "\0\u25bc\0\u0450\0\u2601\0\u0450\0\u2646\0\u0450\0\u268b\0\u26d0"+
    "\0\u2715\0\u0450\0\u275a\0\u279f\0\u0450\0\u27e4\0\u2829\0\u286e"+
    "\0\u234f\0\u2394\0\u23d9\0\u28b3\0\u28f8\0\u0450\0\u0450\0\u0450"+
    "\0\u293d\0\u2982\0\u0450\0\u29c7\0\u0450\0\u2a0c\0\u2a51\0\u2a96"+
    "\0\u0450\0\u2adb\0\u2b20\0\u0450\0\u2b65\0\u0450\0\u2baa\0\u0450"+
    "\0\u0450\0\u0450\0\u0450\0\u0450\0\u2bef\0\u2c34\0\u0450\0\u2c79"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u0450\0\u0450\0\u2e17"+
    "\0\u2e5c\0\u0450";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\3\1\7\1\10"+
    "\1\11\1\3\1\12\1\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\23\1\25"+
    "\1\26\1\27\1\23\1\30\1\23\1\31\1\32\1\33"+
    "\2\23\1\34\1\23\1\35\1\36\4\23\1\35\1\23"+
    "\1\35\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\4\1\5\1\67\1\4\1\3\1\70\1\71"+
    "\1\72\1\66\1\73\1\66\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\2\104\1\106"+
    "\1\107\1\110\1\104\1\111\1\104\1\112\1\104\1\113"+
    "\2\104\1\114\1\104\1\115\1\116\4\104\1\115\1\104"+
    "\1\115\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\17\66\106\0\1\4\2\0\1\4\103\0\1\127"+
    "\2\0\1\66\105\0\1\23\1\130\3\0\42\23\27\0"+
    "\10\130\1\131\1\132\73\130\7\0\1\133\3\0\43\133"+
    "\36\0\1\23\4\0\1\23\1\134\3\23\1\135\3\23"+
    "\1\136\30\23\36\0\1\23\4\0\6\23\1\137\1\140"+
    "\32\23\36\0\1\23\4\0\3\23\1\141\11\23\1\142"+
    "\10\23\1\143\13\23\36\0\1\23\4\0\1\144\3\23"+
    "\1\145\6\23\1\146\3\23\1\147\2\23\1\150\17\23"+
    "\36\0\1\23\4\0\15\23\1\151\24\23\36\0\1\23"+
    "\4\0\7\23\1\152\32\23\36\0\1\23\4\0\10\23"+
    "\1\153\5\23\1\154\23\23\36\0\1\23\4\0\17\23"+
    "\1\155\22\23\36\0\1\23\4\0\42\23\36\0\1\23"+
    "\4\0\1\156\41\23\36\0\1\23\4\0\15\23\1\157"+
    "\24\23\36\0\1\23\4\0\4\23\1\160\3\23\1\161"+
    "\1\23\1\162\6\23\1\163\20\23\36\0\1\23\4\0"+
    "\1\164\41\23\36\0\1\23\4\0\1\165\41\23\36\0"+
    "\1\23\4\0\15\23\1\166\24\23\36\0\1\23\4\0"+
    "\15\23\1\167\24\23\36\0\1\23\4\0\1\170\6\23"+
    "\1\171\32\23\45\0\1\172\20\0\1\173\2\0\1\172"+
    "\2\0\2\35\4\0\1\35\1\0\1\35\44\0\1\174"+
    "\1\172\4\0\1\175\4\0\1\176\4\0\1\177\1\0"+
    "\1\173\2\0\1\172\2\0\2\35\1\177\1\0\1\176"+
    "\1\175\1\35\1\174\1\35\105\0\1\200\105\0\1\201"+
    "\105\0\1\202\1\0\1\203\103\0\1\204\105\0\1\205"+
    "\104\0\1\206\104\0\1\207\107\0\1\210\22\0\1\211"+
    "\101\0\2\127\1\0\1\127\2\0\77\127\10\130\1\212"+
    "\1\132\73\130\7\0\1\23\4\0\2\23\1\213\37\23"+
    "\36\0\1\23\4\0\3\23\1\214\36\23\36\0\1\23"+
    "\4\0\11\23\1\215\30\23\36\0\1\23\4\0\3\23"+
    "\1\216\36\23\36\0\1\23\4\0\7\23\1\217\32\23"+
    "\36\0\1\23\4\0\1\220\3\23\1\221\35\23\36\0"+
    "\1\23\4\0\12\23\1\222\27\23\36\0\1\23\4\0"+
    "\6\23\1\223\33\23\36\0\1\23\4\0\1\23\1\224"+
    "\40\23\36\0\1\23\4\0\1\225\16\23\1\226\22\23"+
    "\36\0\1\23\4\0\11\23\1\227\30\23\36\0\1\23"+
    "\4\0\11\23\1\230\30\23\36\0\1\23\4\0\6\23"+
    "\1\231\33\23\36\0\1\23\4\0\3\23\1\232\36\23"+
    "\36\0\1\23\4\0\10\23\1\233\31\23\36\0\1\23"+
    "\4\0\3\23\1\234\3\23\1\235\32\23\36\0\1\23"+
    "\4\0\3\23\1\236\36\23\36\0\1\23\4\0\4\23"+
    "\1\237\1\240\34\23\36\0\1\23\4\0\16\23\1\241"+
    "\23\23\36\0\1\23\4\0\4\23\1\242\35\23\36\0"+
    "\1\23\4\0\3\23\1\243\13\23\1\244\22\23\36\0"+
    "\1\23\4\0\2\23\1\245\37\23\36\0\1\23\4\0"+
    "\3\23\1\246\2\23\1\247\33\23\36\0\1\23\4\0"+
    "\12\23\1\250\27\23\36\0\1\23\4\0\3\23\1\251"+
    "\36\23\36\0\1\23\4\0\1\252\41\23\36\0\1\23"+
    "\4\0\13\23\1\253\26\23\36\0\1\23\4\0\4\23"+
    "\1\254\35\23\36\0\1\23\4\0\6\23\1\255\33\23"+
    "\66\0\1\256\5\0\1\256\1\257\4\0\1\256\1\0"+
    "\1\256\66\0\1\173\5\0\2\173\4\0\1\173\1\0"+
    "\1\173\66\0\1\260\6\0\1\260\6\0\1\260\66\0"+
    "\1\261\6\0\1\261\4\0\1\261\1\0\1\261\43\0"+
    "\2\262\3\0\1\262\6\0\3\262\4\0\1\262\5\0"+
    "\2\262\1\0\2\262\1\0\3\262\105\0\1\263\35\0"+
    "\1\23\4\0\3\23\1\264\36\23\36\0\1\23\4\0"+
    "\6\23\1\265\33\23\36\0\1\23\4\0\12\23\1\266"+
    "\27\23\36\0\1\23\4\0\12\23\1\267\27\23\36\0"+
    "\1\23\4\0\3\23\1\270\36\23\36\0\1\23\4\0"+
    "\17\23\1\271\22\23\36\0\1\23\4\0\15\23\1\272"+
    "\24\23\36\0\1\23\4\0\3\23\1\273\36\23\36\0"+
    "\1\23\4\0\12\23\1\274\27\23\36\0\1\23\4\0"+
    "\10\23\1\275\31\23\36\0\1\23\4\0\15\23\1\276"+
    "\24\23\36\0\1\23\4\0\15\23\1\277\24\23\36\0"+
    "\1\23\4\0\12\23\1\300\27\23\36\0\1\23\4\0"+
    "\2\23\1\301\37\23\36\0\1\23\4\0\17\23\1\302"+
    "\22\23\36\0\1\23\4\0\2\23\1\303\1\304\36\23"+
    "\36\0\1\23\4\0\17\23\1\305\22\23\36\0\1\23"+
    "\4\0\2\23\1\306\37\23\36\0\1\23\4\0\24\23"+
    "\1\307\15\23\36\0\1\23\4\0\1\310\41\23\36\0"+
    "\1\23\4\0\7\23\1\311\32\23\36\0\1\23\4\0"+
    "\4\23\1\312\35\23\36\0\1\23\4\0\20\23\1\313"+
    "\21\23\36\0\1\23\4\0\15\23\1\314\24\23\36\0"+
    "\1\23\4\0\15\23\1\315\24\23\36\0\1\23\4\0"+
    "\3\23\1\316\36\23\36\0\1\23\4\0\2\23\1\317"+
    "\37\23\36\0\1\23\4\0\5\23\1\320\34\23\36\0"+
    "\1\23\4\0\14\23\1\321\25\23\36\0\1\23\4\0"+
    "\1\23\1\322\40\23\36\0\1\23\4\0\14\23\1\323"+
    "\25\23\66\0\1\256\5\0\2\256\4\0\1\256\1\0"+
    "\1\256\44\0\1\324\5\0\1\325\4\0\1\326\4\0"+
    "\1\327\1\0\1\256\5\0\2\256\1\327\1\0\1\326"+
    "\1\325\1\256\1\324\1\256\36\0\1\23\4\0\4\23"+
    "\1\330\35\23\36\0\1\23\4\0\7\23\1\331\32\23"+
    "\36\0\1\23\4\0\13\23\1\332\26\23\36\0\1\23"+
    "\4\0\15\23\1\333\24\23\36\0\1\23\4\0\5\23"+
    "\1\334\34\23\36\0\1\23\4\0\5\23\1\335\34\23"+
    "\36\0\1\23\4\0\5\23\1\336\34\23\36\0\1\23"+
    "\4\0\15\23\1\337\24\23\36\0\1\23\4\0\2\23"+
    "\1\340\37\23\36\0\1\23\4\0\14\23\1\341\25\23"+
    "\36\0\1\23\4\0\15\23\1\342\24\23\36\0\1\23"+
    "\4\0\4\23\1\343\35\23\36\0\1\23\4\0\3\23"+
    "\1\344\36\23\36\0\1\23\4\0\4\23\1\345\35\23"+
    "\36\0\1\23\4\0\3\23\1\346\36\23\36\0\1\23"+
    "\4\0\15\23\1\347\24\23\36\0\1\23\4\0\1\350"+
    "\41\23\36\0\1\23\4\0\17\23\1\351\22\23\36\0"+
    "\1\23\4\0\4\23\1\352\35\23\36\0\1\23\4\0"+
    "\6\23\1\353\33\23\36\0\1\23\4\0\4\23\1\354"+
    "\35\23\36\0\1\23\4\0\15\23\1\355\24\23\36\0"+
    "\1\23\4\0\22\23\1\356\17\23\36\0\1\23\4\0"+
    "\15\23\1\357\24\23\36\0\1\23\4\0\6\23\1\360"+
    "\33\23\66\0\1\361\6\0\1\361\6\0\1\361\66\0"+
    "\1\362\6\0\1\362\4\0\1\362\1\0\1\362\43\0"+
    "\2\363\3\0\1\363\6\0\3\363\4\0\1\363\5\0"+
    "\2\363\1\0\2\363\1\0\3\363\36\0\1\23\4\0"+
    "\1\364\41\23\36\0\1\23\4\0\10\23\1\365\31\23"+
    "\36\0\1\23\4\0\3\23\1\366\36\23\36\0\1\23"+
    "\4\0\3\23\1\367\36\23\36\0\1\23\4\0\22\23"+
    "\1\370\17\23\36\0\1\23\4\0\6\23\1\371\33\23"+
    "\36\0\1\23\4\0\15\23\1\372\24\23\36\0\1\23"+
    "\4\0\10\23\1\373\31\23\36\0\1\23\4\0\7\23"+
    "\1\374\32\23\36\0\1\23\4\0\4\23\1\375\35\23"+
    "\36\0\1\23\4\0\25\23\1\376\14\23\36\0\1\23"+
    "\4\0\12\23\1\377\27\23\36\0\1\23\4\0\15\23"+
    "\1\u0100\24\23\36\0\1\23\4\0\10\23\1\u0101\31\23"+
    "\36\0\1\23\4\0\23\23\1\u0102\16\23\36\0\1\23"+
    "\4\0\4\23\1\u0103\35\23\36\0\1\23\4\0\3\23"+
    "\1\u0104\36\23\36\0\1\23\4\0\5\23\1\u0105\34\23"+
    "\36\0\1\23\4\0\2\23\1\u0106\37\23\36\0\1\23"+
    "\4\0\3\23\1\u0107\36\23\36\0\1\23\4\0\16\23"+
    "\1\u0108\23\23\36\0\1\23\4\0\12\23\1\u0109\27\23"+
    "\36\0\1\23\4\0\15\23\1\u010a\24\23\36\0\1\23"+
    "\4\0\3\23\1\u010b\36\23\36\0\1\23\4\0\2\23"+
    "\1\u010c\37\23\36\0\1\23\4\0\24\23\1\u010d\15\23"+
    "\36\0\1\23\4\0\23\23\1\u010e\16\23\36\0\1\23"+
    "\4\0\3\23\1\u010f\36\23\36\0\1\23\4\0\6\23"+
    "\1\u0110\33\23\36\0\1\23\4\0\6\23\1\u0111\33\23"+
    "\36\0\1\23\4\0\17\23\1\u0112\22\23\36\0\1\23"+
    "\4\0\7\23\1\u0113\32\23\36\0\1\23\4\0\10\23"+
    "\1\u0114\31\23\36\0\1\23\4\0\10\23\1\u0115\31\23"+
    "\36\0\1\23\4\0\10\23\1\u0116\31\23\36\0\1\23"+
    "\4\0\14\23\1\u0117\25\23\36\0\1\23\4\0\6\23"+
    "\1\u0118\33\23\36\0\1\23\4\0\7\23\1\u0119\32\23"+
    "\36\0\1\23\4\0\10\23\1\u011a\31\23\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11937];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\37\1\20\11"+
    "\41\1\1\0\1\11\1\0\37\1\1\0\1\1\4\0"+
    "\1\1\11\11\51\1\1\11\40\1\4\0\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  P4LangFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case COMMENT: {
              yybegin(YYINITIAL);
            }  // fall though
            case 283: break;
            case NORMAL: {
              yybegin(YYINITIAL);
            }  // fall though
            case 284: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return P4TokenTypes.UNEXPECTED_TOKEN;
            } 
            // fall through
          case 88: break;
          case 2: 
            { yybegin(NORMAL); return P4TokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 89: break;
          case 3: 
            { yybegin(YYINITIAL); return P4TokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 90: break;
          case 4: 
            { yybegin(NORMAL); return P4TokenTypes.DIV;
            } 
            // fall through
          case 91: break;
          case 5: 
            { yybegin(NORMAL); return P4TokenTypes.MUL;
            } 
            // fall through
          case 92: break;
          case 6: 
            { yybegin(NORMAL);
                  return P4TokenTypes.IDENTIFIER;
                  /* FIXME: this might be a type*/
            } 
            // fall through
          case 93: break;
          case 7: 
            { yybegin(NORMAL); return P4TokenTypes.DONTCARE;
            } 
            // fall through
          case 94: break;
          case 8: 
            { yybegin(NORMAL);
                     return P4TokenTypes.INTEGER;
            } 
            // fall through
          case 95: break;
          case 9: 
            { yybegin(NORMAL); return P4TokenTypes.BIT_AND;
            } 
            // fall through
          case 96: break;
          case 10: 
            { yybegin(NORMAL); return P4TokenTypes.DOT;
            } 
            // fall through
          case 97: break;
          case 11: 
            { yybegin(NORMAL); return P4TokenTypes.L_ANGLE;
            } 
            // fall through
          case 98: break;
          case 12: 
            { yybegin(NORMAL); return P4TokenTypes.BIT_OR;
            } 
            // fall through
          case 99: break;
          case 13: 
            { yybegin(NORMAL); return P4TokenTypes.ASSIGN;
            } 
            // fall through
          case 100: break;
          case 14: 
            { yybegin(NORMAL); return P4TokenTypes.NOT;
            } 
            // fall through
          case 101: break;
          case 15: 
            { yybegin(NORMAL); return P4TokenTypes.R_ANGLE;
            } 
            // fall through
          case 102: break;
          case 16: 
            { yybegin(NORMAL); return P4TokenTypes.PLUS;
            } 
            // fall through
          case 103: break;
          case 17: 
            { yybegin(NORMAL); return P4TokenTypes.MINUS;
            } 
            // fall through
          case 104: break;
          case 18: 
            { yybegin(NORMAL); return P4TokenTypes.MOD;
            } 
            // fall through
          case 105: break;
          case 19: 
            { yybegin(NORMAL); return P4TokenTypes.BIT_XOR;
            } 
            // fall through
          case 106: break;
          case 20: 
            { yybegin(NORMAL); return P4TokenTypes.COMPLEMENT;
            } 
            // fall through
          case 107: break;
          case 21: 
            { yybegin(NORMAL); return P4TokenTypes.L_PAREN;
            } 
            // fall through
          case 108: break;
          case 22: 
            { yybegin(NORMAL); return P4TokenTypes.R_PAREN;
            } 
            // fall through
          case 109: break;
          case 23: 
            { yybegin(NORMAL); return P4TokenTypes.L_BRACKET;
            } 
            // fall through
          case 110: break;
          case 24: 
            { yybegin(NORMAL); return P4TokenTypes.R_BRACKET;
            } 
            // fall through
          case 111: break;
          case 25: 
            { yybegin(NORMAL); return P4TokenTypes.L_BRACE;
            } 
            // fall through
          case 112: break;
          case 26: 
            { yybegin(NORMAL); return P4TokenTypes.R_BRACE;
            } 
            // fall through
          case 113: break;
          case 27: 
            { yybegin(NORMAL); return P4TokenTypes.COLON;
            } 
            // fall through
          case 114: break;
          case 28: 
            { yybegin(NORMAL); return P4TokenTypes.COMMA;
            } 
            // fall through
          case 115: break;
          case 29: 
            { yybegin(NORMAL); return P4TokenTypes.QUESTION;
            } 
            // fall through
          case 116: break;
          case 30: 
            { yybegin(NORMAL); return P4TokenTypes.SEMICOLON;
            } 
            // fall through
          case 117: break;
          case 31: 
            { yybegin(NORMAL); return P4TokenTypes.AT;
            } 
            // fall through
          case 118: break;
          case 32: 
            { yybegin(COMMENT); return P4TokenTypes.COMMENT;
            } 
            // fall through
          case 119: break;
          case 33: 
            { yybegin(NORMAL); return P4TokenTypes.COMMENT;
            } 
            // fall through
          case 120: break;
          case 34: 
            { return P4TokenTypes.STRING_LITERAL;
            } 
            // fall through
          case 121: break;
          case 35: 
            { yybegin(NORMAL); return P4TokenTypes.PRE_PROCESS;
            } 
            // fall through
          case 122: break;
          case 36: 
            { yybegin(NORMAL); return P4TokenTypes.IN;
            } 
            // fall through
          case 123: break;
          case 37: 
            { yybegin(NORMAL); return P4TokenTypes.IF;
            } 
            // fall through
          case 124: break;
          case 38: 
            { yybegin(NORMAL); return P4TokenTypes.AND;
            } 
            // fall through
          case 125: break;
          case 39: 
            { yybegin(NORMAL); return P4TokenTypes.RANGE;
            } 
            // fall through
          case 126: break;
          case 40: 
            { yybegin(NORMAL); return P4TokenTypes.SHL;
            } 
            // fall through
          case 127: break;
          case 41: 
            { yybegin(NORMAL); return P4TokenTypes.LE;
            } 
            // fall through
          case 128: break;
          case 42: 
            { yybegin(NORMAL); return P4TokenTypes.OR;
            } 
            // fall through
          case 129: break;
          case 43: 
            { yybegin(NORMAL); return P4TokenTypes.EQ;
            } 
            // fall through
          case 130: break;
          case 44: 
            { yybegin(NORMAL); return P4TokenTypes.NE;
            } 
            // fall through
          case 131: break;
          case 45: 
            { yybegin(NORMAL); return P4TokenTypes.GE;
            } 
            // fall through
          case 132: break;
          case 46: 
            { yybegin(NORMAL); return P4TokenTypes.PP;
            } 
            // fall through
          case 133: break;
          case 47: 
            { yybegin(NORMAL); return P4TokenTypes.BIT;
            } 
            // fall through
          case 134: break;
          case 48: 
            { yybegin(NORMAL); return P4TokenTypes.INT;
            } 
            // fall through
          case 135: break;
          case 49: 
            { yybegin(NORMAL); return P4TokenTypes.OUT;
            } 
            // fall through
          case 136: break;
          case 50: 
            { yybegin(NORMAL); return P4TokenTypes.KEY;
            } 
            // fall through
          case 137: break;
          case 51: 
            { yybegin(NORMAL);
                          return P4TokenTypes.INTEGER;
            } 
            // fall through
          case 138: break;
          case 52: 
            { yybegin(NORMAL); return P4TokenTypes.MASK;
            } 
            // fall through
          case 139: break;
          case 53: 
            { yybegin(NORMAL); return P4TokenTypes.BOOL;
            } 
            // fall through
          case 140: break;
          case 54: 
            { yybegin(NORMAL); return P4TokenTypes.TRUE;
            } 
            // fall through
          case 141: break;
          case 55: 
            { yybegin(NORMAL); return P4TokenTypes.THIS;
            } 
            // fall through
          case 142: break;
          case 56: 
            { yybegin(NORMAL); return P4TokenTypes.ENUM;
            } 
            // fall through
          case 143: break;
          case 57: 
            { yybegin(NORMAL); return P4TokenTypes.ELSE;
            } 
            // fall through
          case 144: break;
          case 58: 
            { yybegin(NORMAL); return P4TokenTypes.EXIT;
            } 
            // fall through
          case 145: break;
          case 59: 
            { yybegin(NORMAL); return P4TokenTypes.VOID;
            } 
            // fall through
          case 146: break;
          case 60: 
            { yybegin(NORMAL); return P4TokenTypes.APPLY;
            } 
            // fall through
          case 147: break;
          case 61: 
            { yybegin(NORMAL); return P4TokenTypes.STATE;
            } 
            // fall through
          case 148: break;
          case 62: 
            { yybegin(NORMAL); return P4TokenTypes.TABLE;
            } 
            // fall through
          case 149: break;
          case 63: 
            { yybegin(NORMAL); return P4TokenTypes.TUPLE;
            } 
            // fall through
          case 150: break;
          case 64: 
            { yybegin(NORMAL); return P4TokenTypes.CONST;
            } 
            // fall through
          case 151: break;
          case 65: 
            { yybegin(NORMAL); return P4TokenTypes.INOUT;
            } 
            // fall through
          case 152: break;
          case 66: 
            { yybegin(NORMAL); return P4TokenTypes.ERROR;
            } 
            // fall through
          case 153: break;
          case 67: 
            { yybegin(NORMAL); return P4TokenTypes.FALSE;
            } 
            // fall through
          case 154: break;
          case 68: 
            { yybegin(NORMAL);
                               return P4TokenTypes.INTEGER;
            } 
            // fall through
          case 155: break;
          case 69: 
            { yybegin(NORMAL); return P4TokenTypes.ACTION;
            } 
            // fall through
          case 156: break;
          case 70: 
            { yybegin(NORMAL); return P4TokenTypes.STRUCT;
            } 
            // fall through
          case 157: break;
          case 71: 
            { yybegin(NORMAL); return P4TokenTypes.SELECT;
            } 
            // fall through
          case 158: break;
          case 72: 
            { yybegin(NORMAL); return P4TokenTypes.SWITCH;
            } 
            // fall through
          case 159: break;
          case 73: 
            { yybegin(NORMAL); return P4TokenTypes.RETURN;
            } 
            // fall through
          case 160: break;
          case 74: 
            { yybegin(NORMAL); return P4TokenTypes.PARSER;
            } 
            // fall through
          case 161: break;
          case 75: 
            { yybegin(NORMAL); return P4TokenTypes.EXTERN;
            } 
            // fall through
          case 162: break;
          case 76: 
            { yybegin(NORMAL); return P4TokenTypes.HEADER;
            } 
            // fall through
          case 163: break;
          case 77: 
            { yybegin(NORMAL); return P4TokenTypes.VARBIT;
            } 
            // fall through
          case 164: break;
          case 78: 
            { yybegin(NORMAL); return P4TokenTypes.ACTIONS;
            } 
            // fall through
          case 165: break;
          case 79: 
            { yybegin(NORMAL); return P4TokenTypes.TYPEDEF;
            } 
            // fall through
          case 166: break;
          case 80: 
            { yybegin(NORMAL); return P4TokenTypes.CONTROL;
            } 
            // fall through
          case 167: break;
          case 81: 
            { yybegin(NORMAL); return P4TokenTypes.PACKAGE;
            } 
            // fall through
          case 168: break;
          case 82: 
            { yybegin(NORMAL); return P4TokenTypes.DEFAULT;
            } 
            // fall through
          case 169: break;
          case 83: 
            { yybegin(NORMAL); return P4TokenTypes.ENTRIES;
            } 
            // fall through
          case 170: break;
          case 84: 
            { yybegin(NORMAL); return P4TokenTypes.ABSTRACT;
            } 
            // fall through
          case 171: break;
          case 85: 
            { yybegin(NORMAL); return P4TokenTypes.TRANSITION;
            } 
            // fall through
          case 172: break;
          case 86: 
            { yybegin(NORMAL); return P4TokenTypes.MATCH_KIND;
            } 
            // fall through
          case 173: break;
          case 87: 
            { yybegin(NORMAL); return P4TokenTypes.HEADER_UNION;
            } 
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
